// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module variable_note_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        r_copy_V_2_address0,
        r_copy_V_2_ce0,
        r_copy_V_2_q0,
        q_V_2_address1,
        q_V_2_ce1,
        q_V_2_we1,
        q_V_2_d1,
        qi_V_2_address0,
        qi_V_2_ce0,
        qi_V_2_q0
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_pp0_stage0 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] r_copy_V_2_address0;
output   r_copy_V_2_ce0;
input  [4:0] r_copy_V_2_q0;
output  [7:0] q_V_2_address1;
output   q_V_2_ce1;
output   q_V_2_we1;
output  [4:0] q_V_2_d1;
output  [7:0] qi_V_2_address0;
output   qi_V_2_ce0;
input  [7:0] qi_V_2_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg r_copy_V_2_ce0;
reg q_V_2_ce1;
reg q_V_2_we1;
reg qi_V_2_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln114_fu_151_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [7:0] i_01_reg_125;
wire   [63:0] zext_ln116_fu_139_p1;
reg   [63:0] zext_ln116_reg_308;
wire   [7:0] i_fu_145_p2;
reg   [7:0] i_reg_323;
reg   [0:0] icmp_ln114_reg_328;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
reg   [7:0] ap_phi_mux_i_01_phi_fu_129_p6;
wire   [5:0] rhs_V_fu_161_p3;
wire  signed [8:0] lhs_V_fu_157_p1;
wire  signed [8:0] sext_ln728_fu_169_p1;
wire   [8:0] ret_V_fu_173_p2;
wire   [2:0] p_Result_2_fu_205_p4;
wire   [0:0] p_Result_1_fu_197_p3;
wire   [0:0] icmp_ln785_fu_215_p2;
wire   [0:0] p_Result_s_fu_179_p3;
wire   [0:0] or_ln785_fu_221_p2;
wire   [0:0] xor_ln785_fu_227_p2;
wire   [0:0] icmp_ln786_fu_245_p2;
wire   [0:0] xor_ln786_fu_239_p2;
wire   [0:0] or_ln786_fu_251_p2;
wire   [0:0] underflow_fu_257_p2;
wire   [0:0] overflow_fu_233_p2;
wire   [0:0] xor_ln340_fu_269_p2;
wire   [0:0] or_ln340_fu_263_p2;
wire   [4:0] p_Val2_3_fu_187_p4;
wire   [0:0] or_ln340_1_fu_275_p2;
wire   [4:0] select_ln340_fu_281_p3;
wire   [4:0] select_ln388_fu_289_p3;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_91;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln114_reg_328 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_01_reg_125 <= i_reg_323;
    end else if ((((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_reg_328 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        i_01_reg_125 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_323 <= i_fu_145_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln114_reg_328 <= icmp_ln114_fu_151_p2;
        zext_ln116_reg_308[7 : 0] <= zext_ln116_fu_139_p1[7 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_reg_328 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_91)) begin
        if ((icmp_ln114_reg_328 == 1'd1)) begin
            ap_phi_mux_i_01_phi_fu_129_p6 = 8'd0;
        end else if ((icmp_ln114_reg_328 == 1'd0)) begin
            ap_phi_mux_i_01_phi_fu_129_p6 = i_reg_323;
        end else begin
            ap_phi_mux_i_01_phi_fu_129_p6 = i_01_reg_125;
        end
    end else begin
        ap_phi_mux_i_01_phi_fu_129_p6 = i_01_reg_125;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln114_fu_151_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_V_2_ce1 = 1'b1;
    end else begin
        q_V_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_V_2_we1 = 1'b1;
    end else begin
        q_V_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        qi_V_2_ce0 = 1'b1;
    end else begin
        qi_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_copy_V_2_ce0 = 1'b1;
    end else begin
        r_copy_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((ap_reset_idle_pp0 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_91 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign i_fu_145_p2 = (8'd1 + ap_phi_mux_i_01_phi_fu_129_p6);

assign icmp_ln114_fu_151_p2 = ((ap_phi_mux_i_01_phi_fu_129_p6 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_215_p2 = ((p_Result_2_fu_205_p4 != 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln786_fu_245_p2 = ((p_Result_2_fu_205_p4 != 3'd7) ? 1'b1 : 1'b0);

assign lhs_V_fu_157_p1 = $signed(qi_V_2_q0);

assign or_ln340_1_fu_275_p2 = (xor_ln340_fu_269_p2 | overflow_fu_233_p2);

assign or_ln340_fu_263_p2 = (underflow_fu_257_p2 | overflow_fu_233_p2);

assign or_ln785_fu_221_p2 = (p_Result_1_fu_197_p3 | icmp_ln785_fu_215_p2);

assign or_ln786_fu_251_p2 = (xor_ln786_fu_239_p2 | icmp_ln786_fu_245_p2);

assign overflow_fu_233_p2 = (xor_ln785_fu_227_p2 & or_ln785_fu_221_p2);

assign p_Result_1_fu_197_p3 = ret_V_fu_173_p2[32'd5];

assign p_Result_2_fu_205_p4 = {{ret_V_fu_173_p2[8:6]}};

assign p_Result_s_fu_179_p3 = ret_V_fu_173_p2[32'd8];

assign p_Val2_3_fu_187_p4 = {{ret_V_fu_173_p2[5:1]}};

assign q_V_2_address1 = zext_ln116_reg_308;

assign q_V_2_d1 = ((or_ln340_1_fu_275_p2[0:0] === 1'b1) ? select_ln340_fu_281_p3 : select_ln388_fu_289_p3);

assign qi_V_2_address0 = zext_ln116_fu_139_p1;

assign r_copy_V_2_address0 = zext_ln116_fu_139_p1;

assign ret_V_fu_173_p2 = ($signed(lhs_V_fu_157_p1) - $signed(sext_ln728_fu_169_p1));

assign rhs_V_fu_161_p3 = {{r_copy_V_2_q0}, {1'd0}};

assign select_ln340_fu_281_p3 = ((or_ln340_fu_263_p2[0:0] === 1'b1) ? 5'd15 : p_Val2_3_fu_187_p4);

assign select_ln388_fu_289_p3 = ((underflow_fu_257_p2[0:0] === 1'b1) ? 5'd16 : p_Val2_3_fu_187_p4);

assign sext_ln728_fu_169_p1 = $signed(rhs_V_fu_161_p3);

assign underflow_fu_257_p2 = (p_Result_s_fu_179_p3 & or_ln786_fu_251_p2);

assign xor_ln340_fu_269_p2 = (underflow_fu_257_p2 ^ 1'd1);

assign xor_ln785_fu_227_p2 = (p_Result_s_fu_179_p3 ^ 1'd1);

assign xor_ln786_fu_239_p2 = (p_Result_1_fu_197_p3 ^ 1'd1);

assign zext_ln116_fu_139_p1 = ap_phi_mux_i_01_phi_fu_129_p6;

always @ (posedge ap_clk) begin
    zext_ln116_reg_308[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //variable_note_update
