// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module check_note_update (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        j,
        H_address0,
        H_ce0,
        H_q0,
        H_address1,
        H_ce1,
        H_q1,
        r_V_4_address0,
        r_V_4_ce0,
        r_V_4_q0,
        r_V_4_address1,
        r_V_4_ce1,
        r_V_4_we1,
        r_V_4_d1,
        r_copy_V_4_address1,
        r_copy_V_4_ce1,
        r_copy_V_4_we1,
        r_copy_V_4_d1,
        q_V_address0,
        q_V_ce0,
        q_V_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state7 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] j;
output  [14:0] H_address0;
output   H_ce0;
input  [0:0] H_q0;
output  [14:0] H_address1;
output   H_ce1;
input  [0:0] H_q1;
output  [14:0] r_V_4_address0;
output   r_V_4_ce0;
input  [4:0] r_V_4_q0;
output  [14:0] r_V_4_address1;
output   r_V_4_ce1;
output   r_V_4_we1;
output  [4:0] r_V_4_d1;
output  [7:0] r_copy_V_4_address1;
output   r_copy_V_4_ce1;
output   r_copy_V_4_we1;
output  [4:0] r_copy_V_4_d1;
output  [7:0] q_V_address0;
output   q_V_ce0;
input  [4:0] q_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg H_ce0;
reg H_ce1;
reg r_V_4_ce0;
reg r_V_4_ce1;
reg r_V_4_we1;
reg r_copy_V_4_ce1;
reg r_copy_V_4_we1;
reg q_V_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] i_05_reg_201;
reg   [4:0] p_0193_reg_213;
reg   [1:0] phi_ln681_reg_223;
reg   [1:0] p_0287_5_reg_233;
reg   [4:0] p_0291_8_reg_250;
wire   [7:0] b_fu_267_p2;
reg   [7:0] b_reg_624;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [14:0] H_addr_1_reg_639;
reg   [14:0] r_V_2_addr_1_reg_644;
reg   [14:0] r_V_2_addr_1_reg_644_pp0_iter1_reg;
reg   [14:0] r_V_2_addr_1_reg_644_pp0_iter2_reg;
wire   [7:0] i_fu_343_p2;
reg   [7:0] i_reg_649;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln53_fu_349_p2;
reg   [0:0] icmp_ln53_reg_654;
reg   [0:0] icmp_ln53_reg_654_pp0_iter1_reg;
reg   [0:0] icmp_ln53_reg_654_pp0_iter2_reg;
reg   [0:0] H_load_reg_658;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] H_load_reg_658_pp0_iter2_reg;
wire   [0:0] icmp_ln59_fu_361_p2;
reg   [0:0] icmp_ln59_reg_662;
wire   [0:0] icmp_ln64_fu_367_p2;
reg   [0:0] icmp_ln64_reg_672;
reg   [0:0] icmp_ln64_reg_672_pp0_iter2_reg;
wire   [4:0] select_ln340_5_fu_604_p3;
reg   [4:0] select_ln340_5_reg_676;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg   [7:0] b_08_reg_165;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln50_fu_612_p2;
reg   [4:0] p_0291_37_reg_177;
reg   [1:0] p_0287_06_reg_189;
reg   [7:0] ap_phi_mux_i_05_phi_fu_205_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_p_0193_phi_fu_216_p4;
reg   [1:0] ap_phi_mux_phi_ln681_phi_fu_226_p4;
wire   [1:0] ap_phi_reg_pp0_iter0_p_0287_5_reg_233;
reg   [1:0] ap_phi_reg_pp0_iter1_p_0287_5_reg_233;
reg   [1:0] ap_phi_reg_pp0_iter2_p_0287_5_reg_233;
wire  signed [1:0] sign1_V_2_fu_460_p3;
wire   [4:0] ap_phi_reg_pp0_iter0_p_0291_8_reg_250;
reg   [4:0] ap_phi_reg_pp0_iter1_p_0291_8_reg_250;
reg   [4:0] ap_phi_reg_pp0_iter2_p_0291_8_reg_250;
wire  signed [4:0] min_temp_V_1_fu_469_p3;
wire   [63:0] zext_ln203_1_fu_300_p1;
wire   [63:0] zext_ln57_2_fu_326_p1;
wire   [63:0] zext_ln58_fu_338_p1;
wire   [63:0] zext_ln56_fu_355_p1;
wire   [7:0] add_ln56_fu_277_p2;
wire   [15:0] tmp_1_fu_282_p3;
wire   [16:0] zext_ln56_1_fu_273_p1;
wire   [16:0] zext_ln203_fu_290_p1;
wire   [16:0] add_ln203_fu_294_p2;
wire   [15:0] tmp_2_fu_309_p3;
wire   [16:0] zext_ln57_fu_305_p1;
wire   [16:0] zext_ln57_1_fu_316_p1;
wire   [16:0] add_ln57_fu_320_p2;
wire   [16:0] add_ln58_fu_332_p2;
wire   [0:0] xor_ln58_fu_373_p2;
wire   [4:0] p_Val2_11_fu_394_p2;
wire   [0:0] p_Result_s_fu_404_p3;
wire   [3:0] trunc_ln746_fu_400_p1;
wire   [0:0] icmp_ln1494_fu_388_p2;
wire   [3:0] trunc_ln1494_fu_384_p1;
wire   [3:0] p_Val2_12_fu_412_p3;
wire   [3:0] select_ln1494_fu_420_p3;
wire   [4:0] zext_ln1494_fu_428_p1;
wire   [0:0] icmp_ln1496_fu_432_p2;
wire   [1:0] sub_ln68_fu_446_p2;
wire   [0:0] or_ln59_fu_379_p2;
wire   [1:0] sign1_V_fu_452_p3;
wire   [4:0] min_temp_V_fu_438_p3;
wire  signed [4:0] r_V_5_fu_486_p0;
wire  signed [1:0] r_V_5_fu_486_p1;
wire   [6:0] r_V_5_fu_486_p2;
wire   [1:0] p_Result_8_fu_512_p4;
wire   [0:0] p_Result_6_fu_504_p3;
wire   [0:0] icmp_ln785_fu_522_p2;
wire   [0:0] p_Result_5_fu_492_p3;
wire   [0:0] or_ln785_fu_528_p2;
wire   [0:0] xor_ln785_fu_534_p2;
wire   [0:0] icmp_ln786_fu_552_p2;
wire   [0:0] xor_ln786_fu_546_p2;
wire   [0:0] or_ln786_fu_558_p2;
wire   [0:0] underflow_fu_564_p2;
wire   [0:0] overflow_fu_540_p2;
wire   [0:0] xor_ln340_fu_576_p2;
wire   [0:0] or_ln340_fu_570_p2;
wire   [4:0] p_Val2_15_fu_500_p1;
wire   [0:0] or_ln340_3_fu_582_p2;
wire   [4:0] select_ln340_fu_588_p3;
wire   [4:0] select_ln388_fu_596_p3;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_120;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln53_fu_349_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_120)) begin
        if (((1'd1 == H_q0) & (icmp_ln64_fu_367_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_p_0287_5_reg_233 <= 2'd1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0287_5_reg_233 <= ap_phi_reg_pp0_iter1_p_0287_5_reg_233;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_120)) begin
        if (((1'd1 == H_q0) & (icmp_ln64_fu_367_p2 == 1'd1))) begin
            ap_phi_reg_pp0_iter2_p_0291_8_reg_250 <= 5'd8;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter2_p_0291_8_reg_250 <= ap_phi_reg_pp0_iter1_p_0291_8_reg_250;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln50_fu_612_p2 == 1'd0))) begin
        b_08_reg_165 <= b_reg_624;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        b_08_reg_165 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln53_reg_654 == 1'd0))) begin
        i_05_reg_201 <= i_reg_649;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_05_reg_201 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln53_reg_654_pp0_iter2_reg == 1'd0))) begin
        p_0193_reg_213 <= p_0291_8_reg_250;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_0193_reg_213 <= p_0291_37_reg_177;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln50_fu_612_p2 == 1'd0))) begin
        p_0287_06_reg_189 <= p_0287_5_reg_233;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0287_06_reg_189 <= 2'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln64_reg_672 == 1'd0) & (1'd1 == H_load_reg_658))) begin
            p_0287_5_reg_233 <= sign1_V_2_fu_460_p3;
        end else if ((1'd0 == H_load_reg_658)) begin
            p_0287_5_reg_233 <= ap_phi_mux_phi_ln681_phi_fu_226_p4;
        end else if ((1'b1 == 1'b1)) begin
            p_0287_5_reg_233 <= ap_phi_reg_pp0_iter2_p_0287_5_reg_233;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln50_fu_612_p2 == 1'd0))) begin
        p_0291_37_reg_177 <= p_0291_8_reg_250;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        p_0291_37_reg_177 <= 5'd8;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        if (((icmp_ln64_reg_672 == 1'd0) & (1'd1 == H_load_reg_658))) begin
            p_0291_8_reg_250 <= min_temp_V_1_fu_469_p3;
        end else if ((1'd0 == H_load_reg_658)) begin
            p_0291_8_reg_250 <= ap_phi_mux_p_0193_phi_fu_216_p4;
        end else if ((1'b1 == 1'b1)) begin
            p_0291_8_reg_250 <= ap_phi_reg_pp0_iter2_p_0291_8_reg_250;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln53_reg_654_pp0_iter2_reg == 1'd0))) begin
        phi_ln681_reg_223 <= p_0287_5_reg_233;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        phi_ln681_reg_223 <= p_0287_06_reg_189;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        H_addr_1_reg_639 <= zext_ln58_fu_338_p1;
        icmp_ln53_reg_654 <= icmp_ln53_fu_349_p2;
        icmp_ln53_reg_654_pp0_iter1_reg <= icmp_ln53_reg_654;
        r_V_2_addr_1_reg_644 <= zext_ln57_2_fu_326_p1;
        r_V_2_addr_1_reg_644_pp0_iter1_reg <= r_V_2_addr_1_reg_644;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        H_load_reg_658 <= H_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        H_load_reg_658_pp0_iter2_reg <= H_load_reg_658;
        icmp_ln53_reg_654_pp0_iter2_reg <= icmp_ln53_reg_654_pp0_iter1_reg;
        icmp_ln64_reg_672_pp0_iter2_reg <= icmp_ln64_reg_672;
        r_V_2_addr_1_reg_644_pp0_iter2_reg <= r_V_2_addr_1_reg_644_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_phi_reg_pp0_iter1_p_0287_5_reg_233 <= ap_phi_reg_pp0_iter0_p_0287_5_reg_233;
        ap_phi_reg_pp0_iter1_p_0291_8_reg_250 <= ap_phi_reg_pp0_iter0_p_0291_8_reg_250;
        i_reg_649 <= i_fu_343_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        b_reg_624 <= b_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'd1 == H_q0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln59_reg_662 <= icmp_ln59_fu_361_p2;
        icmp_ln64_reg_672 <= icmp_ln64_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln64_reg_672 == 1'd1) & (1'd1 == H_load_reg_658))) begin
        select_ln340_5_reg_676 <= select_ln340_5_fu_604_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        H_ce0 = 1'b1;
    end else begin
        H_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        H_ce1 = 1'b1;
    end else begin
        H_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state7) & (icmp_ln50_fu_612_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln53_reg_654 == 1'd0))) begin
        ap_phi_mux_i_05_phi_fu_205_p4 = i_reg_649;
    end else begin
        ap_phi_mux_i_05_phi_fu_205_p4 = i_05_reg_201;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln53_reg_654_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_p_0193_phi_fu_216_p4 = p_0291_8_reg_250;
    end else begin
        ap_phi_mux_p_0193_phi_fu_216_p4 = p_0193_reg_213;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln53_reg_654_pp0_iter2_reg == 1'd0))) begin
        ap_phi_mux_phi_ln681_phi_fu_226_p4 = p_0287_5_reg_233;
    end else begin
        ap_phi_mux_phi_ln681_phi_fu_226_p4 = phi_ln681_reg_223;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln50_fu_612_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        q_V_ce0 = 1'b1;
    end else begin
        q_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        r_V_4_ce0 = 1'b1;
    end else begin
        r_V_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        r_V_4_ce1 = 1'b1;
    end else begin
        r_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln64_reg_672_pp0_iter2_reg == 1'd1) & (1'd1 == H_load_reg_658_pp0_iter2_reg))) begin
        r_V_4_we1 = 1'b1;
    end else begin
        r_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_copy_V_4_ce1 = 1'b1;
    end else begin
        r_copy_V_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_copy_V_4_we1 = 1'b1;
    end else begin
        r_copy_V_4_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln50_fu_612_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign H_address0 = zext_ln57_2_fu_326_p1;

assign H_address1 = H_addr_1_reg_639;

assign add_ln203_fu_294_p2 = (zext_ln56_1_fu_273_p1 + zext_ln203_fu_290_p1);

assign add_ln56_fu_277_p2 = (j + 8'd1);

assign add_ln57_fu_320_p2 = (zext_ln57_fu_305_p1 + zext_ln57_1_fu_316_p1);

assign add_ln58_fu_332_p2 = (zext_ln56_1_fu_273_p1 + zext_ln57_1_fu_316_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_120 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_p_0287_5_reg_233 = 'bx;

assign ap_phi_reg_pp0_iter0_p_0291_8_reg_250 = 'bx;

assign b_fu_267_p2 = (b_08_reg_165 + 8'd1);

assign i_fu_343_p2 = (ap_phi_mux_i_05_phi_fu_205_p4 + 8'd1);

assign icmp_ln1494_fu_388_p2 = (($signed(q_V_q0) > $signed(5'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1496_fu_432_p2 = (($signed(ap_phi_mux_p_0193_phi_fu_216_p4) < $signed(zext_ln1494_fu_428_p1)) ? 1'b1 : 1'b0);

assign icmp_ln50_fu_612_p2 = ((b_08_reg_165 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln53_fu_349_p2 = ((ap_phi_mux_i_05_phi_fu_205_p4 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_361_p2 = ((i_05_reg_201 == b_08_reg_165) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_367_p2 = ((i_05_reg_201 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_522_p2 = ((p_Result_8_fu_512_p4 != 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln786_fu_552_p2 = ((p_Result_8_fu_512_p4 != 2'd3) ? 1'b1 : 1'b0);

assign min_temp_V_1_fu_469_p3 = ((or_ln59_fu_379_p2[0:0] === 1'b1) ? ap_phi_mux_p_0193_phi_fu_216_p4 : min_temp_V_fu_438_p3);

assign min_temp_V_fu_438_p3 = ((icmp_ln1496_fu_432_p2[0:0] === 1'b1) ? ap_phi_mux_p_0193_phi_fu_216_p4 : zext_ln1494_fu_428_p1);

assign or_ln340_3_fu_582_p2 = (xor_ln340_fu_576_p2 | overflow_fu_540_p2);

assign or_ln340_fu_570_p2 = (underflow_fu_564_p2 | overflow_fu_540_p2);

assign or_ln59_fu_379_p2 = (xor_ln58_fu_373_p2 | icmp_ln59_reg_662);

assign or_ln785_fu_528_p2 = (p_Result_6_fu_504_p3 | icmp_ln785_fu_522_p2);

assign or_ln786_fu_558_p2 = (xor_ln786_fu_546_p2 | icmp_ln786_fu_552_p2);

assign overflow_fu_540_p2 = (xor_ln785_fu_534_p2 & or_ln785_fu_528_p2);

assign p_Result_5_fu_492_p3 = r_V_5_fu_486_p2[32'd6];

assign p_Result_6_fu_504_p3 = r_V_5_fu_486_p2[32'd4];

assign p_Result_8_fu_512_p4 = {{r_V_5_fu_486_p2[6:5]}};

assign p_Result_s_fu_404_p3 = p_Val2_11_fu_394_p2[32'd4];

assign p_Val2_11_fu_394_p2 = (5'd0 - q_V_q0);

assign p_Val2_12_fu_412_p3 = ((p_Result_s_fu_404_p3[0:0] === 1'b1) ? 4'd15 : trunc_ln746_fu_400_p1);

assign p_Val2_15_fu_500_p1 = r_V_5_fu_486_p2[4:0];

assign q_V_address0 = zext_ln56_fu_355_p1;

assign r_V_4_address0 = zext_ln203_1_fu_300_p1;

assign r_V_4_address1 = r_V_2_addr_1_reg_644_pp0_iter2_reg;

assign r_V_4_d1 = select_ln340_5_reg_676;

assign r_V_5_fu_486_p0 = min_temp_V_1_fu_469_p3;

assign r_V_5_fu_486_p1 = sign1_V_2_fu_460_p3;

assign r_V_5_fu_486_p2 = ($signed(r_V_5_fu_486_p0) * $signed(r_V_5_fu_486_p1));

assign r_copy_V_4_address1 = zext_ln56_fu_355_p1;

assign r_copy_V_4_d1 = r_V_4_q0;

assign select_ln1494_fu_420_p3 = ((icmp_ln1494_fu_388_p2[0:0] === 1'b1) ? trunc_ln1494_fu_384_p1 : p_Val2_12_fu_412_p3);

assign select_ln340_5_fu_604_p3 = ((or_ln340_3_fu_582_p2[0:0] === 1'b1) ? select_ln340_fu_588_p3 : select_ln388_fu_596_p3);

assign select_ln340_fu_588_p3 = ((or_ln340_fu_570_p2[0:0] === 1'b1) ? 5'd15 : p_Val2_15_fu_500_p1);

assign select_ln388_fu_596_p3 = ((underflow_fu_564_p2[0:0] === 1'b1) ? 5'd16 : p_Val2_15_fu_500_p1);

assign sign1_V_2_fu_460_p3 = ((or_ln59_fu_379_p2[0:0] === 1'b1) ? ap_phi_mux_phi_ln681_phi_fu_226_p4 : sign1_V_fu_452_p3);

assign sign1_V_fu_452_p3 = ((icmp_ln1494_fu_388_p2[0:0] === 1'b1) ? ap_phi_mux_phi_ln681_phi_fu_226_p4 : sub_ln68_fu_446_p2);

assign sub_ln68_fu_446_p2 = (2'd0 - ap_phi_mux_phi_ln681_phi_fu_226_p4);

assign tmp_1_fu_282_p3 = {{add_ln56_fu_277_p2}, {8'd0}};

assign tmp_2_fu_309_p3 = {{j}, {8'd0}};

assign trunc_ln1494_fu_384_p1 = q_V_q0[3:0];

assign trunc_ln746_fu_400_p1 = p_Val2_11_fu_394_p2[3:0];

assign underflow_fu_564_p2 = (p_Result_5_fu_492_p3 & or_ln786_fu_558_p2);

assign xor_ln340_fu_576_p2 = (underflow_fu_564_p2 ^ 1'd1);

assign xor_ln58_fu_373_p2 = (1'd1 ^ H_q1);

assign xor_ln785_fu_534_p2 = (p_Result_5_fu_492_p3 ^ 1'd1);

assign xor_ln786_fu_546_p2 = (p_Result_6_fu_504_p3 ^ 1'd1);

assign zext_ln1494_fu_428_p1 = select_ln1494_fu_420_p3;

assign zext_ln203_1_fu_300_p1 = add_ln203_fu_294_p2;

assign zext_ln203_fu_290_p1 = tmp_1_fu_282_p3;

assign zext_ln56_1_fu_273_p1 = ap_phi_mux_i_05_phi_fu_205_p4;

assign zext_ln56_fu_355_p1 = i_05_reg_201;

assign zext_ln57_1_fu_316_p1 = tmp_2_fu_309_p3;

assign zext_ln57_2_fu_326_p1 = add_ln57_fu_320_p2;

assign zext_ln57_fu_305_p1 = b_08_reg_165;

assign zext_ln58_fu_338_p1 = add_ln58_fu_332_p2;

endmodule //check_note_update
